from flask import request, jsonify
import random
import json

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏Ñ‡∏£‡∏π ‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
with open("timetable.json", "r", encoding="utf-8") as f:
    data = json.load(f)

teachers = data["teachers"]
subjects = data["subjects"]
rooms = data["rooms"]
classes = data["classes"]
days = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","‡∏û‡∏∏‡∏ò","‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ","‡∏®‡∏∏‡∏Å‡∏£‡πå"]
periods = ["08:00-09:00","09:00-10:00","10:00-11:00","11:00-12:00",
           "12:00-13:00","13:00-14:00","14:00-15:00","15:00-16:00","16:00-17:00","17:00-18:00","18:00-19:00"]

def generate_timetable(class_name):
    timetable = []
    used_teacher = {day: [] for day in days}  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    for day in days:
        for period in periods:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á
            if period == "12:00-13:00":
                timetable.append({
                    "class": class_name,
                    "day": day,
                    "period": period,
                    "subject": "‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á üç¥",
                    "teacher": "",
                    "room": ""
                })
                continue

            subject = random.choice(subjects)
            available_teachers = [t for t in teachers if t not in used_teacher[day]]
            teacher = random.choice(available_teachers) if available_teachers else random.choice(teachers)
            used_teacher[day].append(teacher)
            room = random.choice(rooms)
            timetable.append({
                "class": class_name,
                "day": day,
                "period": period,
                "subject": subject,
                "teacher": teacher,
                "room": room
            })
    return timetable

def register_routes(app):
    @app.route("/generate_timetable", methods=["POST"])
    def generate_timetable_api():
        req = request.json
        class_name = req.get("class")
        if not class_name:
            return jsonify({"error": "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"}), 400
        timetable = generate_timetable(class_name)
        return jsonify(timetable)

    @app.route("/get_classes", methods=["GET"])
    def get_classes():
        return jsonify(classes)
